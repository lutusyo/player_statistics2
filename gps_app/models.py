from django.db import models
from players_app.models import Player
from matches_app.models import Match, MatchLineup  # you can import both in one line

class GPSRecord(models.Model):
    match = models.ForeignKey(Match, related_name='gps_records', on_delete=models.CASCADE)
    player = models.ForeignKey(Player, on_delete=models.CASCADE)
    lineup = models.ForeignKey(MatchLineup, null=True, blank=True, on_delete=models.SET_NULL)

    player_name = models.CharField(max_length=255, blank=True, null=True)
    period_name = models.CharField(max_length=100, blank=True, null=True)
    period_number = models.IntegerField(blank=True, null=True)
    max_acceleration = models.FloatField(blank=True, null=True)
    max_deceleration = models.FloatField(blank=True, null=True)
    acceleration_efforts = models.IntegerField(blank=True, null=True)
    deceleration_efforts = models.IntegerField(blank=True, null=True)
    accel_decel_efforts = models.IntegerField(blank=True, null=True)
    accel_decel_efforts_per_minute = models.FloatField(blank=True, null=True)
    duration = models.CharField(max_length=50, blank=True, null=True)
    distance = models.FloatField(blank=True, null=True)
    player_load = models.FloatField(blank=True, null=True)
    max_velocity = models.FloatField(blank=True, null=True)
    max_vel_percent_max = models.FloatField(blank=True, null=True)
    meterage_per_minute = models.FloatField(blank=True, null=True)
    player_load_per_minute = models.FloatField(blank=True, null=True)
    work_rest_ratio = models.FloatField(blank=True, null=True)
    max_heart_rate = models.FloatField(blank=True, null=True)
    avg_heart_rate = models.FloatField(blank=True, null=True)
    max_hr_percent_max = models.FloatField(blank=True, null=True)
    avg_hr_percent_max = models.FloatField(blank=True, null=True)
    hr_exertion = models.FloatField(blank=True, null=True)
    red_zone = models.FloatField(blank=True, null=True)
    heart_rate_band_1_duration = models.FloatField(blank=True, null=True)
    heart_rate_band_2_duration = models.FloatField(blank=True, null=True)
    heart_rate_band_3_duration = models.FloatField(blank=True, null=True)
    heart_rate_band_4_duration = models.FloatField(blank=True, null=True)
    heart_rate_band_5_duration = models.FloatField(blank=True, null=True)
    heart_rate_band_6_duration = models.FloatField(blank=True, null=True)
    energy = models.FloatField(blank=True, null=True)
    high_metabolic_load_distance = models.FloatField(blank=True, null=True)
    standing_distance = models.FloatField(blank=True, null=True)
    walking_distance = models.FloatField(blank=True, null=True)
    jogging_distance = models.FloatField(blank=True, null=True)
    running_distance = models.FloatField(blank=True, null=True)
    hi_distance = models.FloatField(blank=True, null=True)
    sprint_distance = models.FloatField(blank=True, null=True)
    sprint_efforts = models.IntegerField(blank=True, null=True)
    sprint_dist_per_min = models.FloatField(blank=True, null=True)
    high_speed_distance = models.FloatField(blank=True, null=True)
    high_speed_efforts = models.IntegerField(blank=True, null=True)
    high_speed_distance_per_minute = models.FloatField(blank=True, null=True)
    impacts = models.IntegerField(blank=True, null=True)
    athlete_tags = models.TextField(blank=True, null=True)
    activity_tags = models.TextField(blank=True, null=True)
    game_tags = models.TextField(blank=True, null=True)
    athlete_participation_tags = models.TextField(blank=True, null=True)
    period_tags = models.TextField(blank=True, null=True)


    def __str__(self):
        return f"{self.match} | {self.player} | {self.date_recorded}"
